-- Test cases for SBT Issuance System (Phase 2-2)
-- Tests Soul Bound Token creation, metadata, and management

local json = require('json')

-- Test SBT Issuance Functionality
local SBTIssuanceTests = {
    
    -- Test SBT metadata creation
    test_sbt_metadata_creation = function()
        print("\n=== Testing SBT Metadata Creation ===")
        
        -- Setup test data
        local test_user = "sbt-test-user-1"
        local test_vote = {
            vote = "true",
            amount = "1000000000",
            timestamp = os.time(),
            case_id = "celebrity_marriage_tweet_001"
        }
        local test_lucky_number = {
            lucky_number = 7777,
            original_entropy = 987654321,
            callback_id = "test-callback-123",
            timestamp = os.time()
        }
        
        -- Add test vote to state
        State.user_votes[test_user] = test_vote
        State.randao.completed_numbers[test_user] = test_lucky_number
        
        -- Create metadata
        local metadata = createSBTMetadata(test_user, test_vote, test_lucky_number)
        
        if metadata then
            print("SBT Metadata created:\")\n            print(\"  Vote choice: \" .. metadata.vote_choice)\n            print(\"  Lucky number: \" .. metadata.lucky_number)\n            print(\"  News ID: \" .. metadata.news_id)\n            print(\"  Deposit amount: \" .. metadata.deposit_amount)\n            print(\"  Platform: \" .. metadata.platform)\n            \n            -- Validate metadata structure\n            local required_fields = {\n                \"vote_choice\", \"vote_timestamp\", \"news_id\", \"lucky_number\", \n                \"deposit_amount\", \"entropy_source\", \"platform\", \"version\"\n            }\n            \n            local metadata_valid = true\n            for _, field in ipairs(required_fields) do\n                if metadata[field] == nil then\n                    print(\"✗ Missing metadata field: \" .. field)\n                    metadata_valid = false\n                end\n            end\n            \n            if metadata_valid then\n                print(\"✓ SBT metadata creation successful\")\n            else\n                print(\"✗ SBT metadata creation failed - missing fields\")\n            end\n            \n            return metadata_valid\n        else\n            print(\"✗ SBT metadata creation failed - no metadata returned\")\n            return false\n        end\n    end,\n    \n    -- Test SBT issuance process\n    test_sbt_issuance = function()\n        print(\"\\n=== Testing SBT Issuance Process ===\")\n        \n        local test_user = \"sbt-test-user-2\"\n        \n        -- Setup prerequisites\n        State.user_votes[test_user] = {\n            vote = \"fake\",\n            amount = \"1000000000\",\n            timestamp = os.time(),\n            case_id = State.active_tweet.case_id\n        }\n        \n        State.randao.completed_numbers[test_user] = {\n            lucky_number = 1234,\n            original_entropy = 555555555,\n            callback_id = \"test-callback-456\",\n            timestamp = os.time()\n        }\n        \n        -- Issue SBT\n        local success, result = issueSBT(test_user)\n        \n        print(\"SBT issuance result: \" .. tostring(success))\n        if success then\n            print(\"SBT Token ID: \" .. result)\n            \n            -- Verify SBT was stored\n            local sbt_data = State.sbt_tokens[test_user]\n            if sbt_data then\n                print(\"SBT stored successfully:\")\n                print(\"  Title: \" .. sbt_data.title)\n                print(\"  Description: \" .. sbt_data.description)\n                print(\"  Status: \" .. sbt_data.status)\n                print(\"  Transferable: \" .. tostring(sbt_data.transferable))\n                \n                -- Validate SBT properties\n                local sbt_valid = sbt_data.token_id == result and\n                                 sbt_data.status == \"issued\" and\n                                 sbt_data.transferable == false and  -- Soul Bound\n                                 sbt_data.owner == test_user\n                \n                if sbt_valid then\n                    print(\"✓ SBT issuance successful\")\n                else\n                    print(\"✗ SBT issuance failed - invalid properties\")\n                end\n                \n                return sbt_valid\n            else\n                print(\"✗ SBT issuance failed - not stored\")\n                return false\n            end\n        else\n            print(\"✗ SBT issuance failed: \" .. result)\n            return false\n        end\n    end,\n    \n    -- Test SBT eligibility checking\n    test_sbt_eligibility = function()\n        print(\"\\n=== Testing SBT Eligibility Checking ===\")\n        \n        -- Test eligible user\n        local eligible_user = \"eligible-user\"\n        State.user_votes[eligible_user] = {\n            vote = \"true\",\n            amount = \"1000000000\",\n            timestamp = os.time()\n        }\n        State.randao.completed_numbers[eligible_user] = {\n            lucky_number = 9999,\n            original_entropy = 123456789\n        }\n        \n        local eligibility = checkSBTEligibility(eligible_user)\n        print(\"Eligible user check: \" .. tostring(eligibility.eligible))\n        \n        if eligibility.eligible then\n            print(\"  Requirements met: \" .. #eligibility.requirements)\n        else\n            print(\"  Reasons not eligible: \" .. #eligibility.reasons)\n            for i, reason in ipairs(eligibility.reasons) do\n                print(\"    \" .. i .. \". \" .. reason)\n            end\n        end\n        \n        -- Test ineligible user (no vote)\n        local ineligible_user = \"ineligible-user\"\n        local ineligibility = checkSBTEligibility(ineligible_user)\n        print(\"Ineligible user check: \" .. tostring(ineligibility.eligible))\n        \n        if not ineligibility.eligible then\n            print(\"  Reasons correctly identified: \" .. #ineligibility.reasons)\n        end\n        \n        -- Test already has SBT\n        local existing_sbt_user = \"existing-sbt-user\"\n        State.sbt_tokens[existing_sbt_user] = {\n            token_id = \"existing-sbt-123\",\n            status = \"issued\"\n        }\n        local existing_eligibility = checkSBTEligibility(existing_sbt_user)\n        print(\"User with existing SBT: \" .. tostring(existing_eligibility.eligible))\n        \n        local eligibility_tests_passed = eligibility.eligible and \n                                        not ineligibility.eligible and \n                                        not existing_eligibility.eligible\n        \n        if eligibility_tests_passed then\n            print(\"✓ SBT eligibility checking working correctly\")\n        else\n            print(\"✗ SBT eligibility checking failed\")\n        end\n        \n        return eligibility_tests_passed\n    end,\n    \n    -- Test duplicate SBT prevention\n    test_duplicate_sbt_prevention = function()\n        print(\"\\n=== Testing Duplicate SBT Prevention ===\")\n        \n        local test_user = \"duplicate-sbt-user\"\n        \n        -- Setup user with vote and lucky number\n        State.user_votes[test_user] = {\n            vote = \"true\",\n            amount = \"1000000000\",\n            timestamp = os.time()\n        }\n        State.randao.completed_numbers[test_user] = {\n            lucky_number = 5555,\n            original_entropy = 888888888\n        }\n        \n        -- First issuance should succeed\n        local first_success, first_result = issueSBT(test_user)\n        print(\"First SBT issuance: \" .. tostring(first_success))\n        \n        -- Second issuance should fail\n        local second_success, second_result = issueSBT(test_user)\n        print(\"Second SBT issuance: \" .. tostring(second_success))\n        print(\"Second result: \" .. tostring(second_result))\n        \n        local duplicate_prevention_working = first_success and not second_success\n        \n        if duplicate_prevention_working then\n            print(\"✓ Duplicate SBT prevention working correctly\")\n        else\n            print(\"✗ Duplicate SBT prevention failed\")\n        end\n        \n        return duplicate_prevention_working\n    end,\n    \n    -- Test SBT statistics calculation\n    test_sbt_statistics = function()\n        print(\"\\n=== Testing SBT Statistics ===\")\n        \n        local stats = getSBTStatistics()\n        \n        print(\"SBT Statistics:\")\n        print(\"  Enabled: \" .. tostring(stats.enabled))\n        print(\"  Auto-issue: \" .. tostring(stats.auto_issue))\n        print(\"  Total issued: \" .. stats.total_issued)\n        print(\"  Total pending: \" .. stats.total_pending)\n        print(\"  Eligible users: \" .. stats.eligible_users)\n        print(\"  Asset source: \" .. stats.asset_source)\n        \n        -- Validate statistics\n        local stats_valid = stats.total_issued >= 0 and\n                           stats.total_pending >= 0 and\n                           stats.eligible_users >= 0 and\n                           type(stats.enabled) == \"boolean\" and\n                           type(stats.auto_issue) == \"boolean\"\n        \n        if stats_valid then\n            print(\"✓ SBT statistics calculation correct\")\n        else\n            print(\"✗ SBT statistics calculation failed\")\n        end\n        \n        return stats_valid\n    end,\n    \n    -- Test SBT title and description generation\n    test_sbt_title_description = function()\n        print(\"\\n=== Testing SBT Title and Description ===\")\n        \n        local test_user = \"title-test-user\"\n        local lucky_number = 7890\n        \n        -- Setup test data\n        State.user_votes[test_user] = {\n            vote = \"fake\",\n            amount = \"1000000000\",\n            timestamp = os.time(),\n            case_id = \"test-case-001\"\n        }\n        State.randao.completed_numbers[test_user] = {\n            lucky_number = lucky_number,\n            original_entropy = 111111111\n        }\n        \n        -- Issue SBT to generate title and description\n        local success, result = issueSBT(test_user)\n        \n        if success then\n            local sbt_data = State.sbt_tokens[test_user]\n            print(\"Generated Title: \" .. sbt_data.title)\n            print(\"Generated Description: \" .. sbt_data.description)\n            \n            -- Check if title contains lucky number\n            local title_valid = string.find(sbt_data.title, tostring(lucky_number)) ~= nil\n            \n            -- Check if description contains key information\n            local desc_contains_vote = string.find(sbt_data.description, \"fake\") ~= nil\n            local desc_contains_lucky = string.find(sbt_data.description, tostring(lucky_number)) ~= nil\n            \n            local title_desc_valid = title_valid and desc_contains_vote and desc_contains_lucky\n            \n            if title_desc_valid then\n                print(\"✓ SBT title and description generation correct\")\n            else\n                print(\"✗ SBT title and description generation failed\")\n            end\n            \n            return title_desc_valid\n        else\n            print(\"✗ Failed to issue SBT for title/description testing\")\n            return false\n        end\n    end\n}\n\n-- Test auto-issuance integration\nlocal function testAutoIssuanceIntegration()\n    print(\"\\n=== Testing Auto-Issuance Integration ===\")\n    \n    -- Enable auto-issue\n    State.sbt_config.auto_issue = true\n    \n    local test_user = \"auto-issue-user\"\n    \n    -- Setup user vote (but no SBT yet)\n    State.user_votes[test_user] = {\n        vote = \"true\",\n        amount = \"1000000000\",\n        timestamp = os.time()\n    }\n    \n    -- Simulate Lucky Number completion (this would normally trigger auto-issuance)\n    State.randao.completed_numbers[test_user] = {\n        lucky_number = 4321,\n        original_entropy = 777777777,\n        callback_id = \"auto-test-callback\"\n    }\n    \n    -- Simulate the auto-issuance logic from RandomResponse handler\n    local auto_success = false\n    if State.sbt_config.auto_issue then\n        local sbt_success, sbt_result = issueSBT(test_user)\n        auto_success = sbt_success\n        print(\"Auto-issuance result: \" .. tostring(sbt_success))\n        if sbt_success then\n            print(\"Auto-issued SBT ID: \" .. sbt_result)\n        else\n            print(\"Auto-issuance error: \" .. sbt_result)\n        end\n    end\n    \n    if auto_success then\n        print(\"✓ Auto-issuance integration working correctly\")\n    else\n        print(\"✗ Auto-issuance integration failed\")\n    end\n    \n    return auto_success\nend\n\n-- Test SBT configuration management\nlocal function testSBTConfiguration()\n    print(\"\\n=== Testing SBT Configuration Management ===\")\n    \n    -- Test configuration fields\n    local original_enabled = State.sbt_config.enabled\n    local original_auto_issue = State.sbt_config.auto_issue\n    local original_collection_id = State.sbt_config.collection_id\n    \n    print(\"Original configuration:\")\n    print(\"  Enabled: \" .. tostring(original_enabled))\n    print(\"  Auto-issue: \" .. tostring(original_auto_issue))\n    print(\"  Collection ID: \" .. (original_collection_id or \"none\"))\n    \n    -- Test configuration changes\n    State.sbt_config.enabled = false\n    State.sbt_config.auto_issue = false\n    State.sbt_config.collection_id = \"test-collection-123\"\n    \n    print(\"Modified configuration:\")\n    print(\"  Enabled: \" .. tostring(State.sbt_config.enabled))\n    print(\"  Auto-issue: \" .. tostring(State.sbt_config.auto_issue))\n    print(\"  Collection ID: \" .. State.sbt_config.collection_id)\n    \n    -- Restore original configuration\n    State.sbt_config.enabled = original_enabled\n    State.sbt_config.auto_issue = original_auto_issue\n    State.sbt_config.collection_id = original_collection_id\n    \n    print(\"✓ SBT configuration management working correctly\")\n    return true\nend\n\n-- Main test runner for SBT issuance\nfunction runSBTIssuanceTests()\n    print(\"Starting SBT Issuance Tests (Phase 2-2)\")\n    print(\"========================================\")\n    \n    -- Ensure sample data is loaded\n    if State.active_tweet.case_id == \"\" then\n        loadSampleTweet()\n        print(\"Sample tweet data loaded for testing\")\n    end\n    \n    -- Ensure SBT system is enabled\n    State.sbt_config.enabled = true\n    \n    local test_results = {}\n    \n    -- Run SBT issuance tests\n    test_results.metadata_creation = SBTIssuanceTests.test_sbt_metadata_creation()\n    test_results.sbt_issuance = SBTIssuanceTests.test_sbt_issuance()\n    test_results.eligibility_checking = SBTIssuanceTests.test_sbt_eligibility()\n    test_results.duplicate_prevention = SBTIssuanceTests.test_duplicate_sbt_prevention()\n    test_results.statistics_calculation = SBTIssuanceTests.test_sbt_statistics()\n    test_results.title_description = SBTIssuanceTests.test_sbt_title_description()\n    test_results.auto_issuance = testAutoIssuanceIntegration()\n    test_results.configuration_management = testSBTConfiguration()\n    \n    -- Summary\n    print(\"\\n========================================\")\n    print(\"SBT Issuance Test Summary:\")\n    \n    local passed_count = 0\n    local total_count = 0\n    \n    for test_name, result in pairs(test_results) do\n        total_count = total_count + 1\n        if result then\n            passed_count = passed_count + 1\n            print(\"✓ \" .. test_name .. \": PASSED\")\n        else\n            print(\"✗ \" .. test_name .. \": FAILED\")\n        end\n    end\n    \n    print(\"\\nTotal: \" .. passed_count .. \"/\" .. total_count .. \" tests passed\")\n    print(\"Success rate: \" .. string.format(\"%.1f\", (passed_count/total_count)*100) .. \"%\")\n    \n    if passed_count == total_count then\n        print(\"🎉 All SBT issuance tests passed!\")\n    else\n        print(\"⚠️  Some tests failed. Please review implementation.\")\n    end\n    \n    return test_results\nend\n\n-- Test handler simulation for SBT management\nfunction simulateSBTHandlers()\n    print(\"\\n=== Simulating SBT Management Handlers ===\")\n    \n    -- Test Issue-SBT handler simulation\n    print(\"Testing Issue-SBT handler:\")\n    local issued_count = 0\n    for user_address, sbt_data in pairs(State.sbt_tokens) do\n        if sbt_data.status == \"issued\" then\n            issued_count = issued_count + 1\n        end\n    end\n    print(\"  Currently issued SBTs: \" .. issued_count)\n    \n    -- Test Get-User-SBTs handler simulation\n    print(\"Testing Get-User-SBTs handler:\")\n    local users_with_sbts = 0\n    for _ in pairs(State.sbt_tokens) do\n        users_with_sbts = users_with_sbts + 1\n    end\n    print(\"  Users with SBTs: \" .. users_with_sbts)\n    \n    -- Test Get-SBT-Stats handler simulation\n    print(\"Testing Get-SBT-Stats handler:\")\n    local stats = getSBTStatistics()\n    print(\"  Statistics generated successfully: \" .. tostring(stats ~= nil))\n    \n    -- Test eligibility for remaining users\n    print(\"Testing SBT eligibility for voters:\")\n    local eligible_count = 0\n    for user_address, _ in pairs(State.user_votes) do\n        if not State.sbt_tokens[user_address] then\n            local eligibility = checkSBTEligibility(user_address)\n            if eligibility.eligible then\n                eligible_count = eligible_count + 1\n            end\n        end\n    end\n    print(\"  Eligible users without SBT: \" .. eligible_count)\n    \n    print(\"SBT handler simulation completed successfully\")\nend\n\n-- Export test functions\nreturn {\n    runSBTIssuanceTests = runSBTIssuanceTests,\n    simulateSBTHandlers = simulateSBTHandlers,\n    SBTIssuanceTests = SBTIssuanceTests,\n    testAutoIssuanceIntegration = testAutoIssuanceIntegration,\n    testSBTConfiguration = testSBTConfiguration\n}"